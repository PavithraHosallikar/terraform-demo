name: Terraform Deploy Demo

on:
  push:
    branches:
      - dev
      - prod
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

env:
  ARM_SUBSCRIPTION_ID: "63b88364-e9a8-466d-aa04-570dc7d1d0f6"

jobs:
  terraform-deploy:
    name: Deploy to ${{ github.ref_name }}
    runs-on: ubuntu-latest
    
    environment: ${{ github.ref_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect Environment
      id: detect-env
      run: |
        BRANCH_NAME="${{ github.ref_name }}"
        echo "Branch detected: ${BRANCH_NAME}"
        
        if [ "$BRANCH_NAME" = "dev" ]; then
          TF_FOLDER="envs/dev"
          ENV="dev"
        elif [ "$BRANCH_NAME" = "prod" ]; then
          TF_FOLDER="envs/prod"
          ENV="prod"
        else
          echo "Error: Branch '${BRANCH_NAME}' is not mapped to any environment."
          exit 1
        fi
        
        echo "Terraform folder set to: ${TF_FOLDER}"
        echo "Target Environment: ${ENV}"
        
        echo "tf_folder=${TF_FOLDER}" >> $GITHUB_OUTPUT
        echo "env=${ENV}" >> $GITHUB_OUTPUT
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        
    - name: Set Azure Environment Variables
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=63b88364-e9a8-466d-aa04-570dc7d1d0f6" >> $GITHUB_ENV
        
    - name: Terraform Init and Validate
      working-directory: ${{ steps.detect-env.outputs.tf_folder }}
      run: |
        terraform init
        terraform validate
        
    - name: Terraform Plan
      working-directory: ${{ steps.detect-env.outputs.tf_folder }}
      run: |
        terraform plan -out=tfplan
        
    - name: Manual Approval Required
      run: |
        echo "üîç Terraform plan completed successfully!"
        echo "üìã Review the plan above and approve to continue with deployment."
        echo "‚ö†Ô∏è  This will apply changes to the ${{ steps.detect-env.outputs.env }} environment."
        echo "‚è∏Ô∏è  Waiting for manual approval..."
        echo ""
        echo "The workflow will pause here for manual review."
        echo "To continue, approve the environment protection rule above."
        echo "To abort, reject the environment protection rule."
          
    - name: Terraform Apply
      working-directory: ${{ steps.detect-env.outputs.tf_folder }}
      run: |
        terraform apply -input=false tfplan
        
    - name: Cleanup
      working-directory: ${{ steps.detect-env.outputs.tf_folder }}
      if: always()
      run: |
        rm -f tfplan